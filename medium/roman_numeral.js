/*
Write a function that will translate a string of roman numerals into
its correct int. representation.

Rules
  input --> a string of (assumed valid) roman numerals
  output --> the int. val from translating the numeral 

Symbol    Value
I          1
V          5
IX         9
X          10
L          50
XC         90
C          100
D          500
CM         900
M          1,000

Def.
  - No 0's will be explicitly present
  - 900 is generated by XC --> 10 BEFORE 100 --> 90

Example
"MCMXC" (1000 = M, 900 = CM, 90 = XC) --> 1990
MMVIII" (2000 = MM, 8 = VIII) --> 2008
"MDCLXVI" (1000 = M, 600 = DC, 60 = LX, 6 = VI) --> 1666

Data - string.
Obj?

Algo
  - sum all the chars at face value
  - adjust the total based on special chars being present
    - IV IX
    - XL XC
    - CD CM
  - these represent values that are NOT to be taken at face value
  - must subtract from total to get the intended value

  - IV (6) --> 4
  - IX (11) --> 9
  --both subtract 2 from total-- 

  -XL (60) --> 40
  -XC (110) --> 90
  -- both subtract 20 from total--

  -CD (600) --> 400
  -CM (1100) --> 900
  -- subtract 200 from total--

  if numeral.includes('XL') || numeral.includes('XC')
    - total -= 20
*/

function numeralToInt(numeral) {
  switch(numeral) {
    case 'I': return 1;
    case 'V': return 5;
    case 'X': return 10;
    case 'L': return 50;
    case 'C': return 100;
    case 'D': return 500;
    case 'M': return 1000;
  }
}

function solution(numeral) {
  let total = numeral.split('').reduce((sum, numeral) => {
    return sum + numeralToInt(numeral);
  }, 0);

  if (numeral.includes('IV') || numeral.includes('IX')) {
    total -= 2;
  }

  if (numeral.includes('XL') || numeral.includes('XC')) {
    total -= 20;
  }

  if (numeral.includes('CD') || numeral.includes('CM')) {
    total -= 200;
  }

  return total;
}

console.log(solution('MCMXC'));